Ext.data.JsonP.advance({"guide":"<h1>Advanced Debugging</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/advance-section-1'>Manually Report</a></li>\n<li><a href='#!/guide/advance-section-2'>Automatically Report</a></li>\n<li><a href='#!/guide/advance-section-3'>Helpers</a></li>\n</ol>\n</div>\n\n<p>Below are some advance techniques to capture exceptions.</p>\n\n<p>First create a logger object</p>\n\n<pre><code>var project = debuggify.Logger.get('project');\n</code></pre>\n\n<h2 id='advance-section-1'>Manually Report</h2>\n\n<h3>Using Try-Catch</h3>\n\n<p>  We can wrap our code inside <strong>try-catch</strong> so it breaks we can extract information like filename, line no, char no and stacktrace from the exception.</p>\n\n<pre><code>function foo() {\n  try {\n    throw new Error(\"Something went wrong\");\n  } catch(e) {\n\n    // We can manually report this exception\n    project.report(e);\n\n  }\n}\n\nfoo();\n</code></pre>\n\n<h2 id='advance-section-2'>Automatically Report</h2>\n\n<h3>Using Try-Catch wrapper</h3>\n\n<p>This will <strong>wrap multiple</strong> functions at once.</p>\n\n<p>First create a human object</p>\n\n<pre><code>var Human = {\n\n  name: \"Anonmous\",\n\n  eyes: {\n    see : function() {\n      throw new Error(\"Something went wrong while seeing\");\n    },\n\n    blink : function() {\n      throw new Error(\"Something went wrong while blinking\");\n    },\n  },\n\n  talk : function() {\n    throw new Error(\"Something went wrong while talking\");\n  },\n\n  run: function() {\n    throw new Error(\"Something went wrong while running\");\n  },\n\n  walk : function() {\n    throw new Error(\"Something went wrong while walking\");\n  }\n};\n</code></pre>\n\n<p>Now, To automatic enable the error tracking inside the functions</p>\n\n<pre><code>// All the 1st level functions and their children functions will be wrapped\n// talk run walk are wrapped\n// see blink will not be wrapped\nproject.track(Human);\n\n// Only walk and run will be wrapped\nproject.track(bar, ['walk', 'run']);\n\n// To track children objects Human.eyes\n// see blink will be wrapped\nproject.track(Human.eyes);\n</code></pre>\n\n<p>So, now errors will be reported automatically</p>\n\n<pre><code>Human.walk();\n</code></pre>\n\n<p>We often have to work with big objects which have multilevel of hierarchy of functions. So we need to track all the sub level functions.</p>\n\n<pre><code>// Lets extend the Human object\n\nHuman.talk.to = function(name) {\n  throw new Error(\"Something went wrong while talking  to \" + name);\n};\n\nHuman.talk.via = function(device) {\n  throw new Error(\"Something went wrong while talking  via \" + device);\n};\n\n// The same will track errors for to and from.\n// Need need to add extra tracking\nproject.track(Human);\n</code></pre>\n\n<p><strong>NOTE</strong>: This will only wrap the functions while are immediate children not the prototype chain functions</p>\n\n<p>To check whether a function is currently tracked or not</p>\n\n<pre><code>project.isTracked(Human.talk.to); // return true\n</code></pre>\n\n<h3>Using with Jquery</h3>\n\n<pre><code>// All methods of bar will be wrapped\nproject.track(jQuery);\n\n// Only the mentioned functions will be wrapped\nproject.track(jQuery, ['extend', 'trim', 'hasData', 'css' ]);\n</code></pre>\n\n<p>For more details on debugging jQuery, see <a href=\"#!/guide/frameworks\">frameworks section</a></p>\n\n<h3>Disable Try-Catch wrapper</h3>\n\n<pre><code>// For all the functions\nproject1.untrack(bar);\n\n// For only mentioned function names\nproject1.untrack(bar, ['extend', \"trim\"]);\n</code></pre>\n\n<p>This will restore the original functions. This will work only if the function is already wrapped.</p>\n\n<h2 id='advance-section-3'>Helpers</h2>\n\n<h3>SetTimeout &amp; SetInterval</h3>\n\n<p>We have wrapped <code>setTimeout</code> and <code>setInterval</code> by default so any exceptions happens though their callbacks will be captured automatically.</p>\n\n<h3>Jquery Ajax Helper</h3>\n\n<pre><code>// A simple ajax helper to track ajax errors\n$(document).ajaxError(function(event, jqXHR, ajaxSettings, thrownError) {\n\n  project.error(thrownError);\n\n});\n</code></pre>\n\n<p>In future we will be integrating it in the debuggify js file to automatically capture ajax errors.</p>\n","title":"Advance Techniques"});